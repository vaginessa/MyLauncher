package com.xx.mylauncher.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xx.mylauncher.dao.CellInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CELL_INFO_ENTITY.
*/
public class CellInfoEntityDao extends AbstractDao<CellInfoEntity, Long> {

    public static final String TABLENAME = "CELL_INFO_ENTITY";

    /**
     * Properties of entity CellInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CellType = new Property(1, Integer.class, "cellType", false, "CELL_TYPE");
        public final static Property CellLocation = new Property(2, Integer.class, "cellLocation", false, "CELL_LOCATION");
        public final static Property CellX = new Property(3, Integer.class, "cellX", false, "CELL_X");
        public final static Property CellY = new Property(4, Integer.class, "cellY", false, "CELL_Y");
        public final static Property CellHSpan = new Property(5, Integer.class, "cellHSpan", false, "CELL_HSPAN");
        public final static Property CellVSpan = new Property(6, Integer.class, "cellVSpan", false, "CELL_VSPAN");
        public final static Property IconName = new Property(7, String.class, "iconName", false, "ICON_NAME");
        public final static Property Screen = new Property(8, Integer.class, "screen", false, "SCREEN");
        public final static Property HotseatCellX = new Property(9, Integer.class, "hotseatCellX", false, "HOTSEAT_CELL_X");
        public final static Property HotseatCellY = new Property(10, Integer.class, "hotseatCellY", false, "HOTSEAT_CELL_Y");
        public final static Property Widgetid = new Property(11, Integer.class, "widgetid", false, "WIDGETID");
        public final static Property LabelName = new Property(12, String.class, "labelName", false, "LABEL_NAME");
        public final static Property PkgName = new Property(13, String.class, "pkgName", false, "PKG_NAME");
        public final static Property ClsName = new Property(14, String.class, "clsName", false, "CLS_NAME");
    };


    public CellInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CellInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CELL_INFO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CELL_TYPE' tinyint," + // 1: cellType
                "'CELL_LOCATION' tinyint," + // 2: cellLocation
                "'CELL_X' INTEGER," + // 3: cellX
                "'CELL_Y' INTEGER," + // 4: cellY
                "'CELL_HSPAN' INTEGER," + // 5: cellHSpan
                "'CELL_VSPAN' INTEGER," + // 6: cellVSpan
                "'ICON_NAME' char(200)," + // 7: iconName
                "'SCREEN' tinyint," + // 8: screen
                "'HOTSEAT_CELL_X' INTEGER," + // 9: hotseatCellX
                "'HOTSEAT_CELL_Y' INTEGER," + // 10: hotseatCellY
                "'WIDGETID' INTEGER," + // 11: widgetid
                "'LABEL_NAME' char(200)," + // 12: labelName
                "'PKG_NAME' char(200)," + // 13: pkgName
                "'CLS_NAME' char(200));"); // 14: clsName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CELL_INFO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CellInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cellType = entity.getCellType();
        if (cellType != null) {
            stmt.bindLong(2, cellType);
        }
 
        Integer cellLocation = entity.getCellLocation();
        if (cellLocation != null) {
            stmt.bindLong(3, cellLocation);
        }
 
        Integer cellX = entity.getCellX();
        if (cellX != null) {
            stmt.bindLong(4, cellX);
        }
 
        Integer cellY = entity.getCellY();
        if (cellY != null) {
            stmt.bindLong(5, cellY);
        }
 
        Integer cellHSpan = entity.getCellHSpan();
        if (cellHSpan != null) {
            stmt.bindLong(6, cellHSpan);
        }
 
        Integer cellVSpan = entity.getCellVSpan();
        if (cellVSpan != null) {
            stmt.bindLong(7, cellVSpan);
        }
 
        String iconName = entity.getIconName();
        if (iconName != null) {
            stmt.bindString(8, iconName);
        }
 
        Integer screen = entity.getScreen();
        if (screen != null) {
            stmt.bindLong(9, screen);
        }
 
        Integer hotseatCellX = entity.getHotseatCellX();
        if (hotseatCellX != null) {
            stmt.bindLong(10, hotseatCellX);
        }
 
        Integer hotseatCellY = entity.getHotseatCellY();
        if (hotseatCellY != null) {
            stmt.bindLong(11, hotseatCellY);
        }
 
        Integer widgetid = entity.getWidgetid();
        if (widgetid != null) {
            stmt.bindLong(12, widgetid);
        }
 
        String labelName = entity.getLabelName();
        if (labelName != null) {
            stmt.bindString(13, labelName);
        }
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(14, pkgName);
        }
 
        String clsName = entity.getClsName();
        if (clsName != null) {
            stmt.bindString(15, clsName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CellInfoEntity readEntity(Cursor cursor, int offset) {
        CellInfoEntity entity = new CellInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cellType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cellLocation
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // cellX
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // cellY
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // cellHSpan
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // cellVSpan
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // iconName
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // screen
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // hotseatCellX
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // hotseatCellY
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // widgetid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // labelName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pkgName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // clsName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CellInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCellType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCellLocation(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCellX(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCellY(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCellHSpan(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCellVSpan(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIconName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setScreen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHotseatCellX(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHotseatCellY(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setWidgetid(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setLabelName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPkgName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setClsName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CellInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CellInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
